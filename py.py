Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import faker
>>> import random
>>> def line(*args):
	pass

>>> fake = faker.Faker()
>>> names = [fake.name() for _ in range(random.randint(0,30))]
>>> print(names)
['Robert Austin', 'Tiffany Griffin', 'Charles Cummings', 'Stephen Martin', 'Kaylee Johnson', 'John Morris', 'Elizabeth Gonzalez', 'Timothy Parks', 'John Hodge', 'Stephen White', 'Daniel Rivas', 'James Wheeler', 'Hannah Estrada', 'Rachel Scott', 'Douglas Gonzalez', 'Larry Morales Jr.', 'Ronald Gonzalez', 'Carolyn Rodriguez']
>>> line
<function line at 0x0000014D18B97280>
>>> print(line)
<function line at 0x0000014D18B97280>
>>> def f(x):
	return x*x

>>> def modify_list(L, fn):
	for idx, v in enumerate(L):
		L[idx] = fn(v)

		
>>> L=[1, 2, 3]
>>> modify_list(L,f)
>>> print(L)
[1, 4, 9]
>>> f = lambda x: x*x
>>> type(f)
<class 'function'>
>>> f
<function <lambda> at 0x0000014D1983C040>
>>> f(3)
9
>>> x = lambda x,y: x%z
>>> x(2,3)
Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    x(2,3)
  File "<pyshell#25>", line 1, in <lambda>
    x = lambda x,y: x%z
NameError: name 'z' is not defined
>>> c = lambda: True
>>> c()
True
>>> L=[1,2,3,4]
>>> list(map(lambda x: x**2, L))
[1, 4, 9, 16]
>>> L1=[10, 20, 30, 40]
>>> list(map(lambda x, y: x%y, L))
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    list(map(lambda x, y: x%y, L))
TypeError: <lambda>() missing 1 required positional argument: 'y'
>>> L1=[10, 20, 30, 40]
>>> L2=[214, 211, 92,789]
>>> list(map(lambda x, y: x%y, L2, L1))
[4, 11, 2, 29]
>>> list(map(lambda x, y: x%y, L1, L2))
[10, 20, 30, 40]
>>> def even_fn(x):
	if x % 2 == 0
	
SyntaxError: invalid syntax
>>> def even_fn(x):
	if x % 2 == 0:
		return True
	return False

>>> print(list(filter(even_fx, [1, 3, 2, 5, 20, 21])))
Traceback (most recent call last):
  File "<pyshell#43>", line 1, in <module>
    print(list(filter(even_fx, [1, 3, 2, 5, 20, 21])))
NameError: name 'even_fx' is not defined
>>> print(list(filter(even_fn, [1, 3, 2, 5, 20, 21])))
[2, 20]
>>> print(list(filter(lambda x: x%2 == 0, [1, 3, 2, 5, 20, 21] )))
[2, 20]
>>> print(list(filter(lambda x: x**2 < 50, [1, 3, 2, 5, 20, 21] )))
[1, 3, 2, 5]
>>> class Employee:
	def __init__(self, name, age):
		self.name = name
		self.age = age

		
>>> Alex = Employee('Alex', 20)
>>> Amada = Employee('Amanda', 30)
>>> David = [Alex, Amada, David]
Traceback (most recent call last):
  File "<pyshell#54>", line 1, in <module>
    David = [Alex, Amada, David]
NameError: name 'David' is not defined
>>> David = Employee('David', 23)
>>> Li =  = [Alex, Amada, David]
SyntaxError: invalid syntax
>>> Li=[Alex, Amada, David]
>>> Li.sort(key=lambda x: x.age)
>>> print([item.name for item in Li])
['Alex', 'David', 'Amanda']
>>>  radii =[r for r in range(0,20,2)]
 
SyntaxError: unexpected indent
>>> radii =[r for r in range(0,20,2)]
>>> print(radii)
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
>>> list(map(lambda x: pi*x**2, radii))
Traceback (most recent call last):
  File "<pyshell#63>", line 1, in <module>
    list(map(lambda x: pi*x**2, radii))
  File "<pyshell#63>", line 1, in <lambda>
    list(map(lambda x: pi*x**2, radii))
NameError: name 'pi' is not defined
>>> pi
Traceback (most recent call last):
  File "<pyshell#64>", line 1, in <module>
    pi
NameError: name 'pi' is not defined
>>> import math
>>> list(map(lambda x: pi*x**2, radii))
Traceback (most recent call last):
  File "<pyshell#66>", line 1, in <module>
    list(map(lambda x: pi*x**2, radii))
  File "<pyshell#66>", line 1, in <lambda>
    list(map(lambda x: pi*x**2, radii))
NameError: name 'pi' is not defined
>>> list(map(lambda x: math.pi*x**2, radii))
[0.0, 12.566370614359172, 50.26548245743669, 113.09733552923255, 201.06192982974676, 314.1592653589793, 452.3893421169302, 615.7521601035994, 804.247719318987, 1017.8760197630929]
>>> import faker
>>> fake_list = [fake.credit_card_number() for _ in range(100)]
>>> fake_list
['38046668173817', '060413611975', '3591747400468018', '676136015739', '4299301920004578257', '3511498804638403', '4943476507925929560', '4291552811726421', '6011637325910829', '4508532189410', '213139684823569', '180069399543518', '4970578937435', '3505315126080148', '6551292155662292', '3520790784336597', '4369053026335188781', '676267923347', '4873543075712633', '3583913882558599', '30312560228226', '30047265372313', '3506997493358071', '6011226026521489', '375839590084552', '2295978955678278', '4725594483647085', '213106964645046', '30449949754827', '374494448573363', '676258347910', '6543477742791701', '563761863494', '4597872756381391', '374504259678604', '4693786409287553771', '639023038545', '675967381459', '5516872452976820', '3588403438436628', '30473677682802', '6525489957404757', '30101603497165', '503825130480', '30005879815242', '213111556177275', '4987380080774', '3571990133353222', '4100980957488', '213106859728360', '38362745105882', '372474907461963', '30087771774800', '180044547701235', '4923459353653409', '4081170383407595', '3593503028197259', '379942769506664', '4529152617723336', '4149299413628021368', '213117755154353', '4307717950328', '341169673334141', '4234480651414', '213142939144435', '3519400979822418', '2271685832765057', '213178154641713', '5443326361847125', '4863924201409721028', '377542036745202', '4843042617817111602', '3551529503197753', '3530596409959954', '375257686513311', '4338863864987876', '372881137725670', '378326389321848', '579080419529', '213112899845669', '30444595517651', '4719340166413198580', '5428884154254551', '213122193157885', '4656008033648371', '4873631380611', '6011104342023755', '30342504128117', '3547261036472027', '2277944228593860', '3557674791292322', '5103382390489000', '4104914038188222', '4982731919534607355', '4061294999741', '346116261238353', '2701929623032883', '3517686715989121', '6011594206255792', '3595591422598832']
>>> fake_list.sort(key= lambda number: number[-4])
>>> fake_list
['6011637325910829', '3505315126080148', '503825130480', '4987380080774', '4307717950328', '4873631380611', '060413611975', '6011226026521489', '6543477742791701', '4597872756381391', '675967381459', '372474907461963', '180044547701235', '4149299413628021368', '4234480651414', '213178154641713', '4863924201409721028', '4843042617817111602', '378326389321848', '6551292155662292', '4873543075712633', '30047265372313', '30473677682802', '3519400979822418', '3547261036472027', '3557674791292322', '2701929623032883', '38046668173817', '213139684823569', '180069399543518', '676267923347', '374494448573363', '563761863494', '4693786409287553771', '3571990133353222', '4923459353653409', '4529152617723336', '375257686513311', '6011104342023755', '2277944228593860', '375839590084552', '30449949754827', '6525489957404757', '30087771774800', '213117755154353', '341169673334141', '213142939144435', '5428884154254551', '676136015739', '213106964645046', '30005879815242', '38362745105882', '2271685832765057', '377542036745202', '372881137725670', '213112899845669', '6011594206255792', '4291552811726421', '3520790784336597', '5516872452976820', '3588403438436628', '379942769506664', '4970578937435', '4725594483647085', '676258347910', '30101603497165', '213111556177275', '4100980957488', '4081170383407595', '3593503028197259', '5443326361847125', '3551529503197753', '4338863864987876', '30444595517651', '213122193157885', '4982731919534607355', '3591747400468018', '4299301920004578257', '3511498804638403', '4369053026335188781', '3583913882558599', '30312560228226', '3506997493358071', '2295978955678278', '374504259678604', '639023038545', '213106859728360', '4719340166413198580', '4656008033648371', '30342504128117', '4104914038188222', '346116261238353', '3595591422598832', '4943476507925929560', '4508532189410', '3530596409959954', '579080419529', '5103382390489000', '4061294999741', '3517686715989121']
>>> fake_list
['6011637325910829', '3505315126080148', '503825130480', '4987380080774', '4307717950328', '4873631380611', '060413611975', '6011226026521489', '6543477742791701', '4597872756381391', '675967381459', '372474907461963', '180044547701235', '4149299413628021368', '4234480651414', '213178154641713', '4863924201409721028', '4843042617817111602', '378326389321848', '6551292155662292', '4873543075712633', '30047265372313', '30473677682802', '3519400979822418', '3547261036472027', '3557674791292322', '2701929623032883', '38046668173817', '213139684823569', '180069399543518', '676267923347', '374494448573363', '563761863494', '4693786409287553771', '3571990133353222', '4923459353653409', '4529152617723336', '375257686513311', '6011104342023755', '2277944228593860', '375839590084552', '30449949754827', '6525489957404757', '30087771774800', '213117755154353', '341169673334141', '213142939144435', '5428884154254551', '676136015739', '213106964645046', '30005879815242', '38362745105882', '2271685832765057', '377542036745202', '372881137725670', '213112899845669', '6011594206255792', '4291552811726421', '3520790784336597', '5516872452976820', '3588403438436628', '379942769506664', '4970578937435', '4725594483647085', '676258347910', '30101603497165', '213111556177275', '4100980957488', '4081170383407595', '3593503028197259', '5443326361847125', '3551529503197753', '4338863864987876', '30444595517651', '213122193157885', '4982731919534607355', '3591747400468018', '4299301920004578257', '3511498804638403', '4369053026335188781', '3583913882558599', '30312560228226', '3506997493358071', '2295978955678278', '374504259678604', '639023038545', '213106859728360', '4719340166413198580', '4656008033648371', '30342504128117', '4104914038188222', '346116261238353', '3595591422598832', '4943476507925929560', '4508532189410', '3530596409959954', '579080419529', '5103382390489000', '4061294999741', '3517686715989121']
>>> 